From 2487d52967bf277f5c2eb59ec6910a28efe87c72 Mon Sep 17 00:00:00 2001
From: B K Karthik <karthik.bk2000@live.com>
Date: Sat, 4 Jul 2020 23:58:17 -0400
Subject: [PATCH]   - Add a new field to the core kernel task structure called,
 wait for     it, "id".   - When the task is created, set the id to your id. 
 Imaginative, I     know.  You try writing these tasks.   - Add a new proc
 file for every task called, "id", located in the     /proc/${PID}/ directory
 for that task.   - When the proc file is read from, have it print out the
 value of     your id, and then increment it by one, allowing different tasks
 to     have different values for the "id" file over time as they are read    
 from.

Signed-off-by: B K Karthik <karthik.bk2000@live.com>
---
 fs/proc/base.c        | 32 ++++++++++++++++++++++++++++++++
 include/linux/sched.h |  1 +
 kernel/fork.c         |  1 +
 3 files changed, 34 insertions(+)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index d86c0afc8a85..cce50a2be15f 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -3112,6 +3112,37 @@ static int proc_pid_personality(struct seq_file *m, struct pid_namespace *ns,
 	return err;
 }
 
+static ssize_t eudyptula_id_read(struct file *file, char __user *buff,
+		size_t count, loff_t *ppos)
+{
+	struct task_struct *task = get_proc_task(file_inode(file));
+	int len;
+	char id[18];
+	int retval = -EINVAL;
+
+	if (!task)
+		goto out_notask;
+	if (*ppos != 0) {
+		retval = 0;
+		goto out;
+	}
+
+	len = sprintf(id, "%llx\n", task->id);
+	if (copy_to_user(buff, id, 18))
+		goto out;
+
+	task->id++;
+	*ppos += len;
+	retval = len;
+out:	put_task_struct(task);
+out_notask:
+	return retval;
+}
+
+static const struct file_operations proc_eudyptula_id_operations = {
+	.read = eudyptula_id_read,
+};
+
 #ifdef CONFIG_LIVEPATCH
 static int proc_pid_patch_state(struct seq_file *m, struct pid_namespace *ns,
 				struct pid *pid, struct task_struct *task)
@@ -3239,6 +3270,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 #if defined(CONFIG_CHECKPOINT_RESTORE) && defined(CONFIG_POSIX_TIMERS)
 	REG("timers",	  S_IRUGO, proc_timers_operations),
 #endif
+	REG("id", S_IRUGO, proc_timers_operations),
 	REG("timerslack_ns", S_IRUGO|S_IWUGO, proc_pid_set_timerslack_ns_operations),
 #ifdef CONFIG_LIVEPATCH
 	ONE("patch_state",  S_IRUSR, proc_pid_patch_state),
diff --git a/include/linux/sched.h b/include/linux/sched.h
index b50c7db0b6a4..4fab7900e8d6 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1279,6 +1279,7 @@ struct task_struct {
 	unsigned int			sequential_io;
 	unsigned int			sequential_io_avg;
 #endif
+	u64 id;
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
 	unsigned long			task_state_change;
 #endif
diff --git a/kernel/fork.c b/kernel/fork.c
index 559dc2845b4c..5d1099dd6612 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -2045,6 +2045,7 @@ static __latent_entropy struct task_struct *copy_process(
 	p->sequential_io	= 0;
 	p->sequential_io_avg	= 0;
 #endif
+	p->id = 0xa24a6bdd6a14;
 
 	/* Perform scheduler related setup. Assign this task to a CPU. */
 	retval = sched_fork(clone_flags, p);
-- 
2.20.1

