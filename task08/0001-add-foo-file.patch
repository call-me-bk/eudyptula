From 090bba1ed1df8dce3d187cb9e9263cc066bcd81a Mon Sep 17 00:00:00 2001
From: B K Karthik <karthik.bk2000@live.com>
Date: Sun, 21 Jun 2020 07:01:51 -0400
Subject: [PATCH] add foo file

---
 task08/task08.c | 54 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 54 insertions(+)

diff --git a/task08/task08.c b/task08/task08.c
index 79e608c..b837c4d 100644
--- a/task08/task08.c
+++ b/task08/task08.c
@@ -13,6 +13,11 @@ MODULE_LICENSE("GPL");
 MODULE_AUTHOR("a24a6bdd6a14");
 MODULE_DESCRIPTION("TASK 08 of THE EUDYPTULA CHALLENGE");
 
+static DEFINE_SEMAPHORE(foo_sem);
+
+static char foo_data[PAGE_SIZE];
+static int foo_len;
+
 static struct dentry *eudy;
 
 static ssize_t id_read(struct file *file, char __user *buff,
@@ -50,6 +55,52 @@ static const struct file_operations id_fops = {
 	.write = id_write
 };
 
+static ssize_t foo_read(struct file *file, char __user *buff,
+			size_t count, loff_t *ppos)
+{
+	int retval = -EINVAL;
+
+	if (*ppos != 0)
+		return 0;
+
+	down(&foo_sem);
+
+	if (!copy_to_user(buff, foo_data, foo_len)) {
+		*ppos += count;
+		retval = count;
+	}
+
+	up(&foo_sem);
+	return retval;
+}
+
+static ssize_t foo_write(struct file *file, char const __user *buff,
+			size_t count, loff_t *ppos)
+{
+	int retval = -EINVAL;
+
+	if (count >= PAGE_SIZE)
+		return -EINVAL;
+
+	down(&foo_sem);
+
+	if (copy_from_user(foo_data, buff, count)) {
+		foo_len = 0;
+	} else {
+		foo_len = count;
+		retval = count;
+	}
+
+	up(&foo_sem);
+	return retval;
+}
+
+static const struct file_operations foo_fops = {
+	.owner = THIS_MODULE,
+	.read = foo_read,
+	.write = foo_write
+};
+
 static int __init my_init(void)
 {
 	eudy = debugfs_create_dir("eudyptula", NULL);
@@ -62,6 +113,9 @@ static int __init my_init(void)
 	if (!debugfs_create_u32("jiffies", 0444, eudy, (u32*)&jiffies))
 		goto fail;
 
+	if (!debugfs_create_file("foo", 0644, eudy, NULL, &foo_fops))
+		goto fail;
+
 	pr_debug("Hello World!\n");
 	return 0;
 
-- 
2.20.1

